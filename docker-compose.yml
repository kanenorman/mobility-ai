version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    networks:
      - network
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: "${ZOOKEEPER_PORT}"
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test:
        ["CMD", "bash", "-c", "echo 'ruok' | nc zookeeper ${ZOOKEEPER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
  broker1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker1
    networks:
      - network
    hostname: ${KAFKA_HOST1}
    ports:
      - "${KAFKA_PORT1}:${KAFKA_PORT1}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_LISTENERS: "INTERNAL://${KAFKA_HOST1}:${KAFKA_PORT1}"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://${KAFKA_HOST1}:${KAFKA_PORT1}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z ${KAFKA_HOST1} ${KAFKA_PORT1}"]
      interval: 10s
      timeout: 5s
      retries: 5
  broker2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker2
    networks:
      - network
    hostname: ${KAFKA_HOST2}
    ports:
      - "${KAFKA_PORT2}:${KAFKA_PORT2}"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_LISTENERS: "INTERNAL://${KAFKA_HOST2}:${KAFKA_PORT2}"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://${KAFKA_HOST2}:${KAFKA_PORT2}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z ${KAFKA_HOST2} ${KAFKA_PORT2}"]
      interval: 10s
      timeout: 5s
      retries: 5
  broker3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker3
    networks:
      - network
    hostname: broker3
    ports:
      - "${KAFKA_PORT3}:${KAFKA_PORT3}"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_LISTENERS: "INTERNAL://${KAFKA_HOST3}:${KAFKA_PORT3}"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://${KAFKA_HOST3}:${KAFKA_PORT3}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z ${KAFKA_HOST3} ${KAFKA_PORT3}"]
      interval: 10s
      timeout: 5s
      retries: 5
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      connect:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "${KAFKA_HOST1}:${KAFKA_PORT1},${KAFKA_HOST2}:${KAFKA_PORT2},${KAFKA_HOST3}:${KAFKA_PORT3}"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - network
  connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: connect
    hostname: connect
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      flask_database:
        condition: service_healthy
    networks:
      - network
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "${KAFKA_HOST1}:${KAFKA_PORT1},${KAFKA_HOST2}:${KAFKA_PORT2},${KAFKA_HOST3}:${KAFKA_PORT3}"
      CONNECT_GROUP_ID: connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.json.JsonSchemaConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/etc/kafka-connect-jdbc
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    volumes:
      - ./data_streaming/kafka_streams/kafka-connect-jdbc:/etc/kafka_streams/kafka-connect-jdbc
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.7.4
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -f http://connect:8083/connectors || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
  sink-connectors:
    image: curlimages/curl:8.4.0
    container_name: sink-connectors
    hostname: sink-connectors
    depends_on:
      flask_database:
        condition: service_healthy
      connect:
        condition: service_healthy
    networks:
      - network
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
    volumes:
      - ./data_streaming/kafka_streams/kafka-connect-jdbc:/etc/kafka_streams/kafka-connect-jdbc
    command: "/etc/kafka_streams/kafka-connect-jdbc/build_connectors.sh"
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      ksqldb-server:
        condition: service_started
      connect:
        condition: service_healthy
    ports:
      - "9021:9021"
    restart: always
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "${KAFKA_HOST1}:${KAFKA_PORT1},${KAFKA_HOST2}:${KAFKA_PORT2},${KAFKA_HOST3}:${KAFKA_PORT3}"
      CONTROL_CENTER_CONNECT_KAFKA_CONNECT_CLUSTER: "connect:8083"
      CONTROL_CENTER_CONNECT_KAFKA-CONNECT_CLUSTER: "http://connect:8083"
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: "/connectors"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_KSQL_KSQLDB_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - network
  producer:
    container_name: producer
    networks:
      - network
    build:
      context: .
      dockerfile: ./data_streaming/kafka_producer/Dockerfile
    environment:
      KAFKA_HOST1: "${KAFKA_HOST1}"
      KAFKA_PORT1: "${KAFKA_PORT1}"
      KAFKA_HOST2: "${KAFKA_HOST2}"
      KAFKA_PORT2: "${KAFKA_PORT2}"
      KAFKA_HOST3: "${KAFKA_HOST3}"
      KAFKA_PORT3: "${KAFKA_PORT3}"
      MBTA_API_KEY: "${MBTA_API_KEY}"
      PYTHONUNBUFFERED: 1
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    volumes:
      - ./data_streaming/kafka_streams/ksqldb-server/queries.sql:/etc/ksqldb-server/queries.sql
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      flask_database:
        condition: service_healthy
      connect:
        condition: service_healthy
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_CONNECT_URL: http://connect:8083/
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_BOOTSTRAP_SERVERS: "${KAFKA_HOST1}:${KAFKA_PORT1},${KAFKA_HOST2}:${KAFKA_PORT2},${KAFKA_HOST3}:${KAFKA_PORT3}"
      KSQL_HOST_NAME: "KSQLDB"
      KSQL_APPLICATION_ID: "KSQLDB"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_QUERIES_FILE: "/etc/ksqldb-server/queries.sql"
    ports:
      - "8088:8088"
    networks:
      - network
    restart: always
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    container_name: ksqldb-cli
    volumes:
      - ./data_streaming/kafka_streams/ksqldb-server/queries.sql:/etc/ksqldb-server/queries.sql
    networks:
      - network
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      ksqldb-server:
        condition: service_started
    entrypoint: /bin/sh
    tty: true
  flask_app:
    restart: always
    container_name: flask_app
    volumes:
      - ./flask_app/app/:/app/flask_app/app/
    networks:
      - network
    build:
      context: .
      dockerfile: ./flask_app/Dockerfile
    ports:
      - "${FLASK_PORT}:${FLASK_PORT}"
    environment:
      - DEV_POSTGRES_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - PYTHONUNBUFFERED=1
      - MAPBOX_TOKEN=${MAPBOX_TOKEN}
    depends_on:
      flask_database:
        condition: service_healthy
  flask_database:
    container_name: flask_database
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - network
  pgadmin:
    restart: always
    image: dpage/pgadmin4
    container_name: pgadmin
    networks:
      - network
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
    depends_on:
      - flask_database
volumes:
  postgres_data:
networks:
  network:
